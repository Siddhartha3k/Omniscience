{"name": "test_au_upload_Feb_18_Medical_Exam_1_2", "status": "skipped", "statusDetails": {"message": "_pytest.outcomes.XFailed: Test Case Fail due to Mismatch in Key value data", "trace": "self = <test_cases.TC_individual_form_upload_validate.Form_upload testMethod=test_au_upload_Feb_18_Medical_Exam_1_2>\n\n    def test_au_upload_Feb_18_Medical_Exam_1_2(self):\n        multiple_form = Test_multiple_form_upload(self.driver)\n        multiple_form.click_a_groups_tab()  # Clicks on Groups tab\n        upload_individual_form = Test_individual_form_upload(self.driver)\n>       upload_individual_form.form_20_Feb_18_Medical_Exam_1_2()  # Validates the Actual with Expected Key values\n\nTC_individual_form_upload_validate.py:168: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <[AttributeError(\"'Test_individual_form_upload' object has no attribute '_testMethodName'\") raised in repr()] Test_individual_form_upload object at 0x4f2e7c0>\n\n    def form_20_Feb_18_Medical_Exam_1_2(self):\n    \n        time.sleep(3)\n        # Clicks on Automation Group\n        # Please change the xpath while running it in your local\n        self.driver.find_element_by_xpath(self.required_group).click()\n        time.sleep(8)\n        self.driver.implicitly_wait(100)\n        # Clicks 'Create' button\n        self.driver.find_element_by_xpath(self.create_form_button).click()\n        time.sleep(5)\n        self.driver.implicitly_wait(100)\n        # Fetches the image_path json file location\n        image_file_path = open(\"../data/image_path.json\", 'r')\n        image_input = image_file_path.read()\n        input_body = json.loads(image_input)\n        image_data = list(input_body.values())\n        # Uploads the Form in to the Web application\n        self.driver.find_element_by_xpath(self.browse_form).send_keys(image_data.__getitem__(19))\n        name_of_image = image_data.__getitem__(19)\n        name_of_image = name_of_image.split('/')\n        # Prints the name of the Form\n        allure.attach(name_of_image[-1])\n        time.sleep(2)\n        # Enters Provider name\n        self.driver.find_element_by_xpath(self.form_provider).send_keys(\"Siddhartha\")\n        time.sleep(2)\n        # Clicks 'save' button\n        self.driver.find_element_by_xpath(self.save_button).click()\n        time.sleep(45)\n        wait = WebDriverWait(self.driver, 400)\n        # waits until image Processed\n        wait.until(EC.visibility_of_element_located((By.XPATH, self.processed_disp)))\n        time.sleep(2)\n        # Clicks the form\n        self.driver.find_element_by_xpath(self.first_form).click()\n        time.sleep(55)\n        self.driver.implicitly_wait(100)\n        # Clicks 'Actions' dropdown\n        self.driver.find_element_by_xpath(self.actions_drop_down).click()\n        time.sleep(5)\n        # Clicks 'View overall results\"\n        self.driver.find_element_by_xpath(self.view_overall_results).click()\n        time.sleep(5)\n        # Select all Results\n        gt_values = self.driver.find_elements_by_xpath(self.list_of_all_values)\n        time.sleep(5)\n    \n        json_file_path = open(\"../data/json_file_paths.json\", 'r')\n        json_input = json_file_path.read()\n        input_body = json.loads(json_input)\n        json_data = list(input_body.values())\n        self.expected_json_data = json_data.__getitem__(19)\n        # Opens JSON data\n        file1 = open(self.expected_json_data, 'r', encoding=\"utf8\")\n        json_input = file1.read()\n        input_body = json.loads(json_input)\n        json_data = list(input_body.values())\n        data_list1 = []\n        for data in gt_values:\n            data_list = data.text\n            # Gets all Web Results into a List\n            data_list1.append(data_list)\n        # Compares the Actual data with Expected data\n        for i in range(len(json_data)):\n            for j in range(len(data_list1)):\n                if data_list1[j] == json_data[i]:\n                    data_list1[j] = 0\n                    json_data[i] = 0\n        expected_data = []\n        actual_data = []\n        actual_data2 = []\n        for i in range(len(json_data)):\n            if json_data[i] != 0:\n                expected_data.append(json_data[i])\n    \n        expected_data1 = expected_data\n        next_line = '\\n'\n        split_list = next_line.join(expected_data1)\n        split_expected_data = split_list.split()\n        # Fetching the English Keys data\n        file1 = open(\"../data/all_keys_english.json\", 'r', encoding=\"utf8\")\n        json_input = file1.read()\n        input_body = json.loads(json_input)\n        english_data = list(input_body.values())\n        english_keys = []\n        for i in split_expected_data:\n            for j in english_data:\n                if i in j:\n                    # Getting all the english data in to a list\n                    english_keys.append(j)\n        # Eliminating the Duplicate keys\n        english_keys = list(set(english_keys))\n        english_keys = str(english_keys)\n        # Printing the Expected Keys in English\n        allure.attach(\"EXPECTED KEYS \" + english_keys.replace(\"\\\\n\", \" \"))\n    \n        expected_data = str(expected_data)\n        expected_data = expected_data.replace('\\\\n', ' ')\n        # Printing the Expected Key values\n        allure.attach(\"EXPECTED :-  \" + expected_data)\n        for i in range(len(data_list1)):\n            if data_list1[i] != 0:\n                if data_list1[i].__contains__(\"Low Confidence. Please Verify this Key's Values\"):\n                    # Prints Accurate or Inaccurate Data with 'Low Confidence\"\n                    actual_data.append(\"VERIFY  \" + data_list1[i])\n    \n                else:\n                    # Prints Inaccurate data with High confidence\n                    actual_data2.append(\"ERROR:Inaccurate but high confidence:-  \" + data_list1[i])\n    \n        actual_data = str(actual_data)\n        actual_data = actual_data.replace('\\\\n', ' ')\n        actual_data3 = actual_data2\n        actual_data3 = str(actual_data3)\n        actual_data3 = actual_data3.replace('\\\\n', ' ')\n        # Prints Web data from Results screen\n        allure.attach(\"ACTUAL:-  \" + actual_data + \"  \" + actual_data3)\n        # Clicks on Groups tab\n        self.driver.find_element_by_xpath(self.group_tab).click()\n    \n        k = 0\n        for i in range(len(data_list1)):\n            if data_list1[i] == 0:\n                k = k + 0\n            else:\n                k = k + 1\n    \n        if k == 0:\n            # Prints if All values are Correct\n            allure.attach(\"All Results are Accurate\")\n        elif actual_data2 != []:\n            # Assertion Fails if all the values are not accurate\n            assert str(expected_data) == str(actual_data2)\n    \n        else:\n            # Fail if if there is a Mismatch in Web data with Expected data\n>           pytest.xfail(\"Test Case Fail due to Mismatch in Key value data\")\nE           _pytest.outcomes.XFailed: Test Case Fail due to Mismatch in Key value data\n\n..\\page_objects\\individul_forms.py:2671: XFailed"}, "attachments": [{"source": "eea23720-9d04-426e-9474-d4a913b295f3-attachment.attach"}, {"source": "2e56f548-bc62-4c30-afc1-4ffc8be1b40a-attachment.attach"}, {"source": "81a105b0-73b8-437e-8438-f31d7ecd3e47-attachment.attach"}, {"source": "580f780d-2a93-49fb-82db-1f83b763659d-attachment.attach"}], "start": 1596096022684, "stop": 1596096230249, "uuid": "4aa430e6-a688-460c-8086-d3b6b265ac9a", "historyId": "4ed15a2d46986ea689bc367e8934bfec", "testCaseId": "cc1bf06f614871acd4af6f23315521ce", "fullName": "TC_individual_form_upload_validate.Form_upload#test_au_upload_Feb_18_Medical_Exam_1_2", "labels": [{"name": "suite", "value": "TC_individual_form_upload_validate"}, {"name": "subSuite", "value": "Form_upload"}, {"name": "host", "value": "DESKTOP-1VD23I9"}, {"name": "thread", "value": "36116-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "TC_individual_form_upload_validate"}]}